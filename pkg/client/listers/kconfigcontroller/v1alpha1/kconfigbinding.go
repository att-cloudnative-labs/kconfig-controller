/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/gbraxton/kconfig/pkg/apis/kconfigcontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KconfigBindingLister helps list KconfigBindings.
type KconfigBindingLister interface {
	// List lists all KconfigBindings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.KconfigBinding, err error)
	// KconfigBindings returns an object that can list and get KconfigBindings.
	KconfigBindings(namespace string) KconfigBindingNamespaceLister
	KconfigBindingListerExpansion
}

// kconfigBindingLister implements the KconfigBindingLister interface.
type kconfigBindingLister struct {
	indexer cache.Indexer
}

// NewKconfigBindingLister returns a new KconfigBindingLister.
func NewKconfigBindingLister(indexer cache.Indexer) KconfigBindingLister {
	return &kconfigBindingLister{indexer: indexer}
}

// List lists all KconfigBindings in the indexer.
func (s *kconfigBindingLister) List(selector labels.Selector) (ret []*v1alpha1.KconfigBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KconfigBinding))
	})
	return ret, err
}

// KconfigBindings returns an object that can list and get KconfigBindings.
func (s *kconfigBindingLister) KconfigBindings(namespace string) KconfigBindingNamespaceLister {
	return kconfigBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KconfigBindingNamespaceLister helps list and get KconfigBindings.
type KconfigBindingNamespaceLister interface {
	// List lists all KconfigBindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.KconfigBinding, err error)
	// Get retrieves the KconfigBinding from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.KconfigBinding, error)
	KconfigBindingNamespaceListerExpansion
}

// kconfigBindingNamespaceLister implements the KconfigBindingNamespaceLister
// interface.
type kconfigBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KconfigBindings in the indexer for a given namespace.
func (s kconfigBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KconfigBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KconfigBinding))
	})
	return ret, err
}

// Get retrieves the KconfigBinding from the indexer for a given namespace and name.
func (s kconfigBindingNamespaceLister) Get(name string) (*v1alpha1.KconfigBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kconfigbinding"), name)
	}
	return obj.(*v1alpha1.KconfigBinding), nil
}
