/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/att-cloudnative-labs/kconfig-controller/pkg/apis/kconfigcontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DeploymentBindingLister helps list DeploymentBindings.
type DeploymentBindingLister interface {
	// List lists all DeploymentBindings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DeploymentBinding, err error)
	// DeploymentBindings returns an object that can list and get DeploymentBindings.
	DeploymentBindings(namespace string) DeploymentBindingNamespaceLister
	DeploymentBindingListerExpansion
}

// deploymentBindingLister implements the DeploymentBindingLister interface.
type deploymentBindingLister struct {
	indexer cache.Indexer
}

// NewDeploymentBindingLister returns a new DeploymentBindingLister.
func NewDeploymentBindingLister(indexer cache.Indexer) DeploymentBindingLister {
	return &deploymentBindingLister{indexer: indexer}
}

// List lists all DeploymentBindings in the indexer.
func (s *deploymentBindingLister) List(selector labels.Selector) (ret []*v1alpha1.DeploymentBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeploymentBinding))
	})
	return ret, err
}

// DeploymentBindings returns an object that can list and get DeploymentBindings.
func (s *deploymentBindingLister) DeploymentBindings(namespace string) DeploymentBindingNamespaceLister {
	return deploymentBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DeploymentBindingNamespaceLister helps list and get DeploymentBindings.
type DeploymentBindingNamespaceLister interface {
	// List lists all DeploymentBindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DeploymentBinding, err error)
	// Get retrieves the DeploymentBinding from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DeploymentBinding, error)
	DeploymentBindingNamespaceListerExpansion
}

// deploymentBindingNamespaceLister implements the DeploymentBindingNamespaceLister
// interface.
type deploymentBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DeploymentBindings in the indexer for a given namespace.
func (s deploymentBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DeploymentBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeploymentBinding))
	})
	return ret, err
}

// Get retrieves the DeploymentBinding from the indexer for a given namespace and name.
func (s deploymentBindingNamespaceLister) Get(name string) (*v1alpha1.DeploymentBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("deploymentbinding"), name)
	}
	return obj.(*v1alpha1.DeploymentBinding), nil
}
