/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/att-cloudnative-labs/kconfig-controller/pkg/apis/kconfigcontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KconfigLister helps list Kconfigs.
type KconfigLister interface {
	// List lists all Kconfigs in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Kconfig, err error)
	// Kconfigs returns an object that can list and get Kconfigs.
	Kconfigs(namespace string) KconfigNamespaceLister
	KconfigListerExpansion
}

// kconfigLister implements the KconfigLister interface.
type kconfigLister struct {
	indexer cache.Indexer
}

// NewKconfigLister returns a new KconfigLister.
func NewKconfigLister(indexer cache.Indexer) KconfigLister {
	return &kconfigLister{indexer: indexer}
}

// List lists all Kconfigs in the indexer.
func (s *kconfigLister) List(selector labels.Selector) (ret []*v1alpha1.Kconfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Kconfig))
	})
	return ret, err
}

// Kconfigs returns an object that can list and get Kconfigs.
func (s *kconfigLister) Kconfigs(namespace string) KconfigNamespaceLister {
	return kconfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KconfigNamespaceLister helps list and get Kconfigs.
type KconfigNamespaceLister interface {
	// List lists all Kconfigs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Kconfig, err error)
	// Get retrieves the Kconfig from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Kconfig, error)
	KconfigNamespaceListerExpansion
}

// kconfigNamespaceLister implements the KconfigNamespaceLister
// interface.
type kconfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Kconfigs in the indexer for a given namespace.
func (s kconfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Kconfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Kconfig))
	})
	return ret, err
}

// Get retrieves the Kconfig from the indexer for a given namespace and name.
func (s kconfigNamespaceLister) Get(name string) (*v1alpha1.Kconfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kconfig"), name)
	}
	return obj.(*v1alpha1.Kconfig), nil
}
