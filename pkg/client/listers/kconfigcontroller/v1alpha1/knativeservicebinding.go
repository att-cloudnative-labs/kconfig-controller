/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/att-cloudnative-labs/kconfig-controller/pkg/apis/kconfigcontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KnativeServiceBindingLister helps list KnativeServiceBindings.
type KnativeServiceBindingLister interface {
	// List lists all KnativeServiceBindings in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.KnativeServiceBinding, err error)
	// KnativeServiceBindings returns an object that can list and get KnativeServiceBindings.
	KnativeServiceBindings(namespace string) KnativeServiceBindingNamespaceLister
	KnativeServiceBindingListerExpansion
}

// knativeServiceBindingLister implements the KnativeServiceBindingLister interface.
type knativeServiceBindingLister struct {
	indexer cache.Indexer
}

// NewKnativeServiceBindingLister returns a new KnativeServiceBindingLister.
func NewKnativeServiceBindingLister(indexer cache.Indexer) KnativeServiceBindingLister {
	return &knativeServiceBindingLister{indexer: indexer}
}

// List lists all KnativeServiceBindings in the indexer.
func (s *knativeServiceBindingLister) List(selector labels.Selector) (ret []*v1alpha1.KnativeServiceBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KnativeServiceBinding))
	})
	return ret, err
}

// KnativeServiceBindings returns an object that can list and get KnativeServiceBindings.
func (s *knativeServiceBindingLister) KnativeServiceBindings(namespace string) KnativeServiceBindingNamespaceLister {
	return knativeServiceBindingNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KnativeServiceBindingNamespaceLister helps list and get KnativeServiceBindings.
type KnativeServiceBindingNamespaceLister interface {
	// List lists all KnativeServiceBindings in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.KnativeServiceBinding, err error)
	// Get retrieves the KnativeServiceBinding from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.KnativeServiceBinding, error)
	KnativeServiceBindingNamespaceListerExpansion
}

// knativeServiceBindingNamespaceLister implements the KnativeServiceBindingNamespaceLister
// interface.
type knativeServiceBindingNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KnativeServiceBindings in the indexer for a given namespace.
func (s knativeServiceBindingNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KnativeServiceBinding, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KnativeServiceBinding))
	})
	return ret, err
}

// Get retrieves the KnativeServiceBinding from the indexer for a given namespace and name.
func (s knativeServiceBindingNamespaceLister) Get(name string) (*v1alpha1.KnativeServiceBinding, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("knativeservicebinding"), name)
	}
	return obj.(*v1alpha1.KnativeServiceBinding), nil
}
